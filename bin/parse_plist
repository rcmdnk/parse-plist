#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
parse_plist: Parse OS X's plist to defaults commands
https://github.com/rcmdnk/parse_plist
"""

__prog__ = "parse_plist"
__author__ = "rcmdnk"
__copyright__ = "Copyright (c) 2015 rcmdnk"
__credits__ = ["rcmdnk"]
__license__ = "MIT"
__version__ = "v0.0.1"
__date__ = "13/Mar/2015"
__maintainer__ = "rcmdnk"
__email__ = "rcmdnk@gmail.com"
__status__ = "Prototype"


class ParsePlist:
    """Parse plist (xml format) of OS X"""

    def __init__(self, **kw):
        """Initialization."""
        self.date = False
        self.data = False
        self.dic = False
        self.array = False
        for k, v in kw.items():
            if k == 'date':
                self.date = v
            elif k == 'data':
                self.data = v
            elif k == 'dic':
                self.dic = v
            elif k == 'array':
                self.array = v

    def check_value(self, node):
        if node.nodeName == 'date' and not self.date:
            return False
        elif node.nodeName == 'data' and not self.data:
            return False
        elif node.nodeName == 'dict' and not self.dic:
            return False
        elif node.nodeName == 'array' and not self.array:
            return False
        return True

    def check_node(self, node):
        if node.nodeType == node.ELEMENT_NODE:
            child0 = node.childNodes[0].nodeValue\
                if len(node.childNodes) > 0 else ''
            if node.nodeName == 'plist':
                for n in node.childNodes:
                    if n.nodeType == n.ELEMENT_NODE:
                        if n.nodeName == 'dict':
                            return self.check_node(n)
            elif node.nodeName == 'dict':
                d = {}
                n = node.firstChild
                while n:
                    if n.nodeType == node.ELEMENT_NODE:
                        if n.nodeName == 'key':
                            name = n.childNodes[0].nodeValue
                            n = n.nextSibling
                            while n.nodeType != node.ELEMENT_NODE:
                                n = n.nextSibling
                            if self.check_value(n):
                                d.update({name: self.check_node(n)})
                        else:
                            if self.check_value(n):
                                d.update(self.check_node(n))
                    n = n.nextSibling
                return d
            elif node.nodeName == 'array':
                a = []
                n = node.firstChild
                while n:
                    if n.nodeType == n.ELEMENT_NODE:
                        if n.nodeName == 'key':
                            name = child0
                            n = n.nextSibling
                            if self.check_value(n):
                                a.append({name: self.check_node(n)})
                        else:
                            if self.check_value(n):
                                a.append(self.check_node(n))
                    n = n.nextSibling
                return a
            elif node.nodeName == 'string':
                return unicode(child0)
            elif node.nodeName == 'true':
                return True
            elif node.nodeName == 'false':
                return False
            elif node.nodeName == 'integer':
                return int(child0)
            elif node.nodeName == 'real':
                return float(child0)
            elif node.nodeName == 'date':
                return str("date:"+child0)
            elif node.nodeName == 'data':
                return str("data:"+child0)

    def xml_to_dict(self, plist=''):
        from xml.dom import minidom
        if plist == '' or plist.endswith('.xml'):
            plist = self.get_xml(plist)
        import re
        dom = minidom.parseString(re.sub('[\x00-\x08\x0D-\x1F]', '', plist))
        return self.check_node(dom.documentElement)

    def dict_to_cmd(self, domain, dic):
        cmds = []
        for k in dic.keys():
            if type(dic[k]) == unicode:
                cmds.append('defaults write "%s" "%s" -string "%s"' %
                            (domain, k, dic[k]))
            elif type(dic[k]) == bool:
                cmds.append('defaults write "%s" "%s" -bool %s' %
                            (domain, k, dic[k]))
            elif type(dic[k]) == int:
                cmds.append('defaults write "%s" "%s" -int %s' %
                            (domain, k, dic[k]))
            elif type(dic[k]) == float:
                cmds.append('defaults write "%s" "%s" -float %s' %
                            (domain, k, dic[k]))
            elif type(dic[k]) == str:
                if dic[k].startswith('date:'):
                    cmds.append('defaults write %s "%s" -date "%s"' %
                                (domain, k, dic[k].replace("date:", "")))
                elif dic[k].startswith('data:'):
                    cmds.append('defaults write "%s" "%s" -data "%s"' %
                                (domain, k, dic[k].replace("data:", "")))
            elif type(dic[k]) == list:
                cmds.append('defaults write "%s" "%s" -array %s' %
                            (domain, k, dic[k]))
            elif type(dic[k]) == dict:
                cmds.append('defaults write "%s" "%s" -dict "%s"' %
                            (domain, k, dic[k]))
        return cmds

    def get_xml(self, domain):
        if domain.endswith('.xml'):
            cmd = ['cat',  domain]
        else:
            cmd = ['defaults', 'export', domain, '-']

        import subprocess
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
        out = p.communicate()[0]
        ret = p.returncode
        if ret != 0:
            import sys
            print "ERROR: Failed to get plist as xml:"
            print ""
            print "$ " + cmd
            print out
            sys.exit(ret)
        return out

    def get_cmd(self, domain='', plist='', input_type='domain'):
        if domain == '':
            import subprocess
            cmd = 'defaults domains'.split()
            p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                                 stderr=subprocess.STDOUT)
            out = p.communicate()[0]
            ret = p.returncode
            if ret != 0:
                import sys
                print "ERROR: Failed to get domains:"
                print ""
                print "$ " + cmd
                print out
                sys.exit(ret)
            domains = [x.strip() for x in out.split(',')]
            cmds = []
            for d in domains:
                cmds += self.get_cmd(d)
            return cmds

        out = plist
        if plist == '':
            out = self.get_xml(domain)
        if input_type != 'dict':
            out = self.xml_to_dict(out)
        return self.dict_to_cmd(domain, out)


def main():
    import argparse
    argparser = argparse.ArgumentParser(prog=__prog__)
    argparser.add_argument(
        "--date", action="store_true", default=False, dest='date')
    argparser.add_argument(
        "--data", action="store_true", default=False, dest='data')
    argparser.add_argument(
        "--dict", action="store_true", default=False, dest='dic')
    argparser.add_argument(
        "--array", action="store_true", default=False, dest='array')
    argparser.add_argument(
        "--user", action="store_true", default=False, dest='user')
    argparser.add_argument(
        "--system", action="store_true", default=False, dest='system')

    (ns, args) = argparser.parse_known_args()
    params = vars(ns)

    import sys
    import os

    if params['user'] or params['system']:
        if os.geteuid() != 0:
            import getpass
            sudopass = getpass.getpass("sudo password: ")

    parser = ParsePlist(**params)

    domain = ''
    plist = ''
    input_type = 'domain'
    if len(args) > 0:
        domain = args[0]
    if domain.endswith('.xml'):
        if len(args) == 1:
            print "Need domain name for xml file"
            sys.exit(1)
        domain = args[1]
        plist = domain
        input_type = 'xml'
    elif domain.endswith('.plist'):
        domain = domain.split('/')[-1].replace('.plist', '')

    cmds_current = parser.get_cmd(domain, plist, input_type)
    cmds = []

    def move_dir(src, dst, passwd):
        cmd = 'mv "%s" "%s"' % (src, dst)
        if passwd == '':
            os.system(cmd)
        else:
            os.system('echo %s|sudo -S %s' % (passwd, cmd))

    def remove_dir(src, passwd):
        cmd = 'rm -rf "%s"' % (src)
        if passwd == '':
            os.system(cmd)
        else:
            os.system('echo %s|sudo -S %s' % (passwd, cmd))

    def get_diff(parent_dir):
        preferences = parent_dir + '/Library/Preferences'
        for ext in ['.tmp', '.bak']:
            if os.path.isdir(preferences+ext):
                remove_dir(preferences+ext, sudopass)
        try:
            move_dir(preferences, preferences+'.bak', sudopass)
            cmds_orig = parser.get_cmd(domain, plist, input_type)
            if os.path.isdir(preferences):
                move_dir(preferences, preferences+'.tmp', sudopass)
            move_dir(preferences+'.bak', preferences, sudopass)
        except KeyboardInterrupt:
            if os.path.isdir(preferences+'.bak'):
                if os.path.isdir(preferences):
                    move_dir(preferences, preferences+'.tmp', sudopass)
                move_dir(preferences+'.bak', preferences, sudopass)
            sys.exit(1)

        return [x for x in cmds_current if x not in cmds_orig]

    if params['user']:
        cmds += get_diff(os.environ.get('HOME'))
    if params['system']:
        cmds += get_diff('')
    if not params['user'] and not params['system']:
        cmds = cmds_current

    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout)
    for c in cmds:
        print c

if __name__ == "__main__":
    main()
