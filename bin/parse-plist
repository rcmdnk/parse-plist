#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

"""
parse-plist: Parse OS X's plist to defaults commands
https://github.com/rcmdnk/parse-plist
"""

__prog__ = "parse-plist"
__author__ = "rcmdnk"
__copyright__ = "Copyright (c) 2015 rcmdnk"
__credits__ = ["rcmdnk"]
__license__ = "MIT"
__version__ = "v0.0.1"
__date__ = "13/Mar/2015"
__maintainer__ = "rcmdnk"
__email__ = "rcmdnk@gmail.com"
__status__ = "Prototype"


class ParsePlist:
    """Parse plist (xml format) of OS X"""

    def __init__(self, **kw):
        """Initialization."""
        self.date = False
        self.data = False
        self.dic = False
        self.array = False
        self.alltype = False
        self.out = 'cmd'
        for k, v in kw.items():
            if k == 'date':
                self.date = v
            elif k == 'data':
                self.data = v
            elif k == 'dict':
                self.dic = v
            elif k == 'array':
                self.array = v
            elif k == 'alltype':
                self.alltype = v
            elif k == 'out':
                if v in ['dict', 'dic', 'json']:
                    self.out = 'dict'
                else:
                    # v in ['cmd', 'cmds', 'command', 'commands', 'defaults']:
                    self.out = 'cmd'

    def xml_to_json(self, plist=''):
        if plist == '' or plist.endswith('.xml'):
            plist = self.get_xml(plist)
        cmd = 'plutil -convert json -o - -'.split()
        plist = plist.replace('<data>', '<string>data:')
        plist = plist.replace('</data>', '</string>')
        plist = plist.replace('<date>', '<string>date:')
        plist = plist.replace('</date>', '</string>')
        import subprocess
        return subprocess.Popen(cmd, stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.STDOUT,
                                universal_newlines=True).\
            communicate(input=plist)[0]

    def xml_to_dict(self, plist=''):
        if plist == '' or plist.endswith('.xml'):
            plist = self.get_xml(plist)
        import json
        return json.loads(self.xml_to_json(plist))

    def dict_to_cmd(self, domain, dic):
        cmds = []
        types = [str]
        import sys
        if sys.version_info.major < 3:
            types += [unicode]
        for k, v in dic.items():
            if type(v) in types:
                if v.startswith('date:'):
                    if self.date or self.alltype:
                        cmds.append('defaults write %s "%s" -date "%s"' %
                                    (domain, k, v.replace("date:", "")))
                elif v.startswith('data:'):
                    if self.data or self.alltype:
                        cmds.append('defaults write "%s" "%s" -data "%s"' %
                                    (domain, k, v.replace("data:", "")))
                else:
                    cmds.append('defaults write "%s" "%s" -string "%s"' %
                                (domain, k, v))
            elif type(v) == bool:
                cmds.append('defaults write "%s" "%s" -bool %s' %
                            (domain, k, v))
            elif type(v) == int:
                cmds.append('defaults write "%s" "%s" -int %s' %
                            (domain, k, v))
            elif type(v) == float:
                cmds.append('defaults write "%s" "%s" -float %s' %
                            (domain, k, v))
            elif type(v) == dict:
                if self.dic or self.alltype:
                    cmds.append('defaults write "%s" "%s" -dict "%s"' %
                                (domain, k, v))
            elif type(v) == list:
                if self.array or self.alltype:
                    cmd = 'defaults write "%s" "%s" -array' % (domain, k)
                    for v2 in v:
                        if type(v2) == unicode or type(v2) == str:
                            if v2.startswith('date:'):
                                cmd += ' "%s"' % (v2.replace("date:", ""))
                            elif v2.startswith('data:'):
                                cmd += ' "%s"' % (v2.replace("data:", ""))
                            else:
                                cmd += ' "%s"' % (v2)
                        elif type(v2) == dict:
                            cmd += ' "%s"' % (v2)
                        else:
                            cmd += ' %s' % (v2)
                    cmds.append(cmd)
        return cmds

    def get_xml(self, domain):
        if domain.endswith('.xml'):
            cmd = ['cat',  domain]
        else:
            cmd = ['defaults', 'export', domain, '-']

        import subprocess
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT,
                             universal_newlines=True)
        out = p.communicate()[0]
        ret = p.returncode
        if ret != 0:
            import sys
            print("ERROR: Failed to get plist as xml:")
            print("")
            print("$ " + cmd)
            print(out)
            sys.exit(ret)
        return out

    def get_domains(self):
        import subprocess
        cmd = 'defaults domains'.split()
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT,
                             universal_newlines=True)
        out = p.communicate()[0]
        ret = p.returncode
        if ret != 0:
            import sys
            print("ERROR: Failed to get domains:")
            print("")
            print("$ " + cmd)
            print(out)
            sys.exit(ret)
        return [x.strip() for x in out.split(',')]

    def get_dict(self, domain='', plist='', input_type='domain'):
        if domain == '':
            dic = {}
            for d in self.get_domains():
                dic.update(self.get_dict(d))
            return dic
        out = plist
        if plist == '':
            out = self.get_xml(domain)
        if input_type != 'dict':
            out = self.xml_to_dict(out)
        dic = {domain: {}}
        for k, v in out.items():
            if type(v) == unicode or type(v) == str:
                if v.startswith('date:') and\
                        not self.date and not self.alltype:
                    continue
                elif v.startswith('data:') and\
                        not self.data and not self.alltype:
                    continue
            elif type(v) == list:
                if not self.array and not self.alltype:
                    continue
            elif type(v) == dict:
                if not self.dic and not self.alltype:
                    continue
            dic[k] = v
        return {domain: dic}

    def get_cmd(self, domain='', plist='', input_type='domain'):
        if domain == '':
            cmds = []
            for d in self.get_domains():
                cmds += self.get_cmd(d)
            return cmds
        out = plist
        if plist == '':
            out = self.get_xml(domain)
        if input_type != 'dict':
            out = self.xml_to_dict(out)
        return self.dict_to_cmd(domain, out)

    def get(self, domain='', plist='', input_type='domain', out=''):
        o = out if out != '' else self.out
        if o == 'cmd':
            return self.get_cmd(domain, plist, input_type)
        elif o == 'dict':
            return self.get_dict(domain, plist, input_type)


def main():
    import argparse
    argparser = argparse.ArgumentParser(prog=__prog__)
    argparser.add_argument(
        "--date", action="store_true", default=False, dest='date',
        help='Enable "date" output.')
    argparser.add_argument(
        "--data", action="store_true", default=False, dest='data',
        help='Enable "data" output.')
    argparser.add_argument(
        "--dict", action="store_true", default=False, dest='dict',
        help='Enable "dict" output.')
    argparser.add_argument(
        "--array", action="store_true", default=False, dest='array',
        help='Enable "array" output.')
    argparser.add_argument(
        "--all", action="store_true", default=False, dest='alltype',
        help='Enable all outputs.')
    argparser.add_argument(
        "--user", action="store_true", default=False, dest='user',
        help='Check user settings.')
    argparser.add_argument(
        "--system", action="store_true", default=False, dest='system',
        help='Check system settings.')
    argparser.add_argument(
        "-o", "--out", action="store", default='cmd', dest='out',
        help='Set output format (defaults commands  or json format).\n'
             'Default is %(default)s.\n'
             'Use json/dict/dic for json format. Others for the command list.')

    (ns, args) = argparser.parse_known_args()
    params = vars(ns)

    import sys
    import os

    parser = ParsePlist(**params)

    domain = ''
    plist = ''
    input_type = 'domain'
    if len(args) > 0:
        domain = args[0]
    if domain.endswith('.xml'):
        if len(args) == 1:
            sys.exit(1)
        domain = args[1]
        plist = domain
        input_type = 'xml'
    elif domain.endswith('.plist'):
        domain = domain.split('/')[-1].replace('.plist', '')

    current_list = parser.get(domain, plist, input_type)
    if type(current_list) == list:
        out_list = []
    elif type(current_list) == dict:
        out_list = {}
    else:
        out_list = ""

    def move_dir(src, dst, sudo=False):
        cmd = '%s mv "%s" "%s"' % ('sudo' if sudo else '', src, dst)
        os.system(cmd)

    def remove_dir(src, sulse, sudo=False):
        cmd = '%s rm -rf "%s"' % ('sudo' if sudo else '', src)
        os.system(cmd)

    def get_diff(parent_dir=''):
        sudo = True if parent_dir == '' else False
        preferences = parent_dir + '/Library/Preferences'
        for ext in ['.tmp', '.bak']:
            if os.path.isdir(preferences+ext):
                remove_dir(preferences+ext, sudo)
        try:
            move_dir(preferences, preferences+'.bak', sudo)
            orig = parser.get(domain, plist, input_type)
            if os.path.isdir(preferences):
                move_dir(preferences, preferences+'.tmp', sudo)
            move_dir(preferences+'.bak', preferences, sudo)
        except KeyboardInterrupt:
            if os.path.isdir(preferences+'.bak'):
                if os.path.isdir(preferences):
                    move_dir(preferences, preferences+'.tmp', sudo)
                move_dir(preferences+'.bak', preferences, sudo)
            sys.exit(1)

        if type(current_list) == list:
            return [x for x in current_list if x not in orig]
        elif type(current_list) == dict:
            dic = {}
            for k, v in current_list.items():
                if k not in orig:
                    dic[k] = v
                else:
                    dic[k] = {}
                    for k2, v2 in v.items():
                        if k2 not in orig[k] or v2 != orig[k][k2]:
                            dic[k][k2] = v2
                if len(dic[k]) == 0:
                    dic.pop(k)
            return dic

    if params['user']:
        if type(current_list) == list:
            out_list += get_diff(os.environ.get('HOME'))
        elif type(current_list) == dict:
            out_list.update(get_diff(os.environ.get('HOME')))
    if params['system']:
        if type(current_list) == list:
            out_list += get_diff()
        elif type(current_list) == dict:
            out_list.update(get_diff())
    if not params['user'] and not params['system']:
        out_list = current_list

    if sys.version_info.major < 3:
        import codecs
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout)
    if type(out_list) == list:
        for c in out_list:
            print(c)
    elif type(out_list) == dict:
        import json
        print(json.dumps(out_list, indent=2))

if __name__ == "__main__":
    main()
